{"version":3,"sources":["components/Globe.js","App.js","serviceWorker.js","index.js","assets/icon3.png"],"names":["Globe","componentDidMount","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","setSize","mount","appendChild","domElement","addGlobe","addLighting","position","z","controls","OrbitControls","update","animate","geometry","SphereGeometry","texture","TextureLoader","load","mapTexture","material","MeshPhongMaterial","color","specular","shininess","map","specularMap","normalMap","cube","Mesh","add","light","AmbientLight","requestAnimationFrame","rotation","y","render","ref","Component","App","className","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"yWA4DeA,EA9Cf,2MACIC,kBAAoB,WAChB,EAAKC,MAAQ,IAAIC,QACjB,EAAKC,OAAS,IAAIC,oBAAmB,GAAIC,OAAOC,WAAWD,OAAOE,YAAa,GAAK,KACpF,EAAKC,SAAW,IAAIC,gBACpB,EAAKD,SAASE,QAASL,OAAOC,WAAYD,OAAOE,aACjD,EAAKI,MAAMC,YAAa,EAAKJ,SAASK,YACtC,EAAKC,WACL,EAAKC,cACL,EAAKZ,OAAOa,SAASC,EAAI,EACzB,EAAKC,SAAW,IAAIC,IAAe,EAAKhB,OAAQ,EAAKK,SAASK,YAC9D,EAAKK,SAASE,SACd,EAAKC,WAZb,EAcIP,SAAW,WACP,IAAIQ,EAAW,IAAIC,iBAAe,EAAG,GAAI,IAErCC,GADS,IAAIC,iBACIC,KAAKC,KACtBC,EAAW,IAAIC,oBAAkB,CACjCC,MAAO,SACPC,SAAU,SACVC,UAAW,IACXC,IAAKT,EACLU,YAAaV,EACbW,UAAWX,IAEf,EAAKY,KAAO,IAAIC,OAAMf,EAAUM,GAChC,EAAK3B,MAAMqC,IAAK,EAAKF,OA3B7B,EA6BIrB,YAAc,WACV,EAAKwB,MAAQ,IAAIC,eAAc,SAAU,KACzC,EAAKvC,MAAMqC,IAAK,EAAKC,QA/B7B,EAiCIlB,QAAU,WACNoB,sBAAuB,EAAKpB,SAC5B,EAAKe,KAAKM,SAASC,GAAK,KACxB,EAAKzB,SAASE,SACd,EAAKZ,SAASoC,OAAQ,EAAK3C,MAAO,EAAKE,SArC/C,wEAuCc,IAAD,OACL,OACI,yBAAK0C,IAAK,SAAAA,GAAG,OAAK,EAAKlC,MAAQkC,SAzC3C,GAA2BC,a,MCFZC,MARf,WACI,OACI,yBAAKC,UAAU,OACX,kBAAC,EAAD,QCKQC,QACW,cAA7B5C,OAAO6C,SAASC,UAEe,UAA7B9C,OAAO6C,SAASC,UAEhB9C,OAAO6C,SAASC,SAASC,MACvB,2DCZNC,IAAST,OAAO,kBAAC,EAAD,MAASU,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB,kBEnInBC,EAAOC,QAAU,IAA0B,oC","file":"static/js/main.94fa6169.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {\n    Scene,\n    PerspectiveCamera,\n    WebGLRenderer,\n    SphereGeometry,\n    MeshPhongMaterial,\n    Mesh,\n    TextureLoader,\n    AmbientLight,\n} from 'three';\nimport OrbitControls from 'three-orbitcontrols';\nimport mapTexture from '../assets/icon3.png';\n\nexport class Globe extends Component {\n    componentDidMount = () => {\n        this.scene = new Scene();\n        this.camera = new PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );\n        this.renderer = new WebGLRenderer();\n        this.renderer.setSize( window.innerWidth, window.innerHeight );\n        this.mount.appendChild( this.renderer.domElement );\n        this.addGlobe();\n        this.addLighting();\n        this.camera.position.z = 4;\n        this.controls = new OrbitControls( this.camera, this.renderer.domElement );\n        this.controls.update();\n        this.animate();\n    }\n    addGlobe = () => {\n        let geometry = new SphereGeometry(1, 50, 50);\n        let loader = new TextureLoader();\n        let texture = loader.load(mapTexture);\n        let material = new MeshPhongMaterial({\n            color: 0xffffff,\n            specular: 0xffffff,\n            shininess: 100,\n            map: texture,\n            specularMap: texture,\n            normalMap: texture\n        });\n        this.cube = new Mesh( geometry, material );\n        this.scene.add( this.cube );\n    }\n    addLighting = () => {\n        this.light = new AmbientLight( 0xffffff, 1.2);\n        this.scene.add( this.light );\n    }\n    animate = () => {\n        requestAnimationFrame( this.animate );\n        this.cube.rotation.y += 0.001;\n        this.controls.update();\n        this.renderer.render( this.scene, this.camera );\n    }\n    render() {\n        return (\n            <div ref={ref => (this.mount = ref)} />\n        )\n    }\n}\n\nexport default Globe;","import React from 'react';\nimport Globe from './components/Globe';\nimport './App.css';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Globe />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/icon3.d5f1a89b.png\";"],"sourceRoot":""}